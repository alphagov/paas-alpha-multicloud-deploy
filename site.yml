# vim:ft=ansible:
---
# Bring up jenkins ci master server.
- hosts: all
  sudo: yes
  roles:
    - geerlingguy.jenkins
    - jdauphant.nginx
    - { role: openconnect, when: vagrant is not defined }
    - role: rvm_io.rvm1-ruby
      rvm1_rvm_check_for_updates: False
      rvm1_rubies:
      - 'ruby-2.2.2'

  pre_tasks:
    - name: install snake oil ssl certificates
      apt: name=ssl-cert state=present
  vars:
    jenkins_plugins:
      - git
      - ssh
      - job-dsl
      - github-api
      - github-oauth
      - parameterized-trigger
      - role-strategy
      - ansicolor
      - build-monitor-plugin
      - build-timeout

    nginx_sites:
      ssl_reverse_proxy:
        - listen 443 ssl
        - ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem
        - ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key
        - server_name jenkins.tooling.paas.alphagov.co.uk
        - location / {
          proxy_pass http://localhost:8080;
          proxy_redirect default;
          proxy_redirect http://$host/ https://$host/;
          proxy_redirect http://$hostname/ https://$host/;
          proxy_read_timeout 15s;
          proxy_connect_timeout 15s;
          }
      default:
        - listen 80
        - return 301 https://$host$request_uri
    nginx_configs:
      proxy:
        - proxy_set_header Host $http_host
        - proxy_set_header X-Real-IP  $remote_addr
        - proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for
        - proxy_set_header X-Forwarded-Proto https
  tasks:
    - name: Create SSH directory
      file: path=/var/lib/jenkins/.ssh state=directory mode=0700 owner=jenkins
      sudo_user: jenkins
    - name: Setup SSH private key
      copy: content="{{ jenkins_ssh_private_key }}" dest=/var/lib/jenkins/.ssh/id_rsa owner=jenkins mode=0600
      sudo_user: jenkins
    - name: Setup SSH public key
      copy: content="{{ jenkins_ssh_public_key }}" dest=/var/lib/jenkins/.ssh/id_rsa.pub owner=jenkins mode=0600
      sudo_user: jenkins
    - name: install required packages
      action: apt pkg={{item}} state=installed
      with_items:
        - ansible
        - figlet
        - git
        - unzip
        - python-dev
        - python-pip
        - python-virtualenv
        - gnupg2
        - gnupg-agent
        - pwgen
        - pinentry-curses
    - name: Test if pass is installed
      shell: /usr/bin/pass --version || echo pass not installed
      register: pass_version
    - name: download password-store
      get_url:
        dest="/tmp/{{ password_store_version }}.tar.xz" mode=0440
        url="http://git.zx2c4.com/password-store/snapshot/password-store-{{ password_store_version }}.tar.xz"
      when: not "{{ password_store_version }}" in pass_version.stdout
    - name: Unpack password-store
      unarchive: src="/tmp/{{ password_store_version }}.tar.xz" dest=/tmp copy=no
      when: not "{{ password_store_version }}" in pass_version.stdout
    - name: Build and install password-store
      shell: "make install"
      args:
        chdir: "/tmp/password-store-{{ password_store_version }}"
      when: not "{{ password_store_version }}" in pass_version.stdout
    - name: Cleanup pass temporary files
      file: path={{ item }} state=absent
      with_items:
        - "/tmp/{{ password_store_version }}.tar.xz"
        - "/tmp/password-store-{{ password_store_version }}"
      when: not "{{ password_store_version }}" in pass_version.stdout
    - git: repo=git@github.gds:multicloudpaas/credentials.git dest=~/.paas-pass accept_hostkey=True
      sudo_user: jenkins
    - name: Test if terraform is installed
      shell: /usr/local/bin/terraform --version || echo terraform not installed
      register: terraform_output
    - name: download terraform
      get_url:
        dest="/tmp/terraform_{{ terraform_version }}_linux_amd64.zip" mode=0440
        url="https://dl.bintray.com/mitchellh/terraform/terraform_{{ terraform_version }}_linux_amd64.zip"
      when: not "{{ terraform_version }}" in terraform_output.stdout
      notify:
        - unzip terraform to /usr/local/bin
    - name: Add tsuru repositories.
      apt_repository: repo='ppa:tsuru/ppa' update_cache=yes
    - name: Install tsuru client packages
      apt: update_cache=true name="{{ item }}"
      with_items:
      - tsuru-client
      - tsuru-admin
    - name: add jenkins to rvm group
      user: name=jenkins groups=rvm append=yes
      notify:
        - restart jenkins
    - name: configure jenkins token
      copy: content="-u {{ jenkins_admin_user }}:{{ jenkins_api_token }}" dest=~/jenkins_auth
      when: jenkins_admin_user is defined and jenkins_api_token is defined and vagrant is not defined
      notify:
        - setup jenkins authentication
    - name: render jenkins authentication configuration script
      template: dest=~/setup_authentication.groovy src=templates/setup_authentication.groovy.j2
      notify:
        - setup jenkins authentication
    - name: update java keystore with github certificate
      copy: content="{{ github_cert }}" dest=~/{{ github_hostname }}.crt
      when: github_cert is defined
      notify:
        - import certificate into java keystore
    - name: render jenkins admin mail and smtp server configuration script
      template: dest=~/setup_mail.groovy src=templates/setup_mail.groovy.j2
      notify:
        - configure admin email and smtp server
    - name: Wipe old dsl jobs
      file: path=/var/lib/jenkins/jobs/default-dsl-job/workspace/jobs state=absent
    - name: copy default dsl seed config.xml to jenkins master
      copy: src=dsl/config.xml dest=/tmp/config.xml owner=jenkins group=jenkins mode=0644
    - name: create default dsl seed job
      shell: "curl -X POST 'http://127.0.0.1:8080/createItem?name=default-dsl-job' --data-binary '@config.xml' -H 'Content-Type: text/xml' -k $(cat ~/jenkins_auth)"
      args:
        chdir: /tmp/
    - name: create jenkins seed job directory structure
      copy: src=jobs dest=/var/lib/jenkins/jobs/default-dsl-job/workspace directory_mode=0750 mode=0640 owner=jenkins group=jenkins
    # Job definitions.
    # We use include in order to override variables, templates don't support that.
    - include: jenkins_job.yml
      vars:
        job_name: ci-cf-destroy-daily-build-aws
        job_template: cf-destroy
        target_environment_name: daily-build
        platform: aws
    - include: jenkins_job.yml
      vars:
        job_name: ci-cf-destroy-daily-build-gce
        job_template: cf-destroy
        target_environment_name: daily-build
        platform: gce
    - include: jenkins_job.yml
      vars:
        job_name: ci-cf-smoke-and-destroy-daily-build-aws
        job_template: smoke-test-cf
        target_environment_name: daily-build
        platform: aws
        downstream_parameterized_trigger_job: ci-cf-destroy-daily-build-aws
    - include: jenkins_job.yml
      vars:
        job_name: ci-cf-smoke-and-destroy-daily-build-gce
        job_template: smoke-test-cf
        target_environment_name: daily-build
        platform: gce
        downstream_parameterized_trigger_job: ci-cf-destroy-daily-build-gce
    - include: jenkins_job.yml
      vars:
        job_name: ci-cf-deploy-daily-build-aws
        job_template: cf-deploy
        target_environment_name: daily-build
        poll_scm: "0 7 * * 1-5"
        platform: aws
        downstream_parameterized_trigger_job: ci-cf-smoke-and-destroy-daily-build-aws
    - include: jenkins_job.yml
      vars:
        job_name: ci-cf-deploy-daily-build-gce
        job_template: cf-deploy
        target_environment_name: daily-build
        poll_scm: "0 7 * * 1-5"
        platform: gce
        downstream_parameterized_trigger_job: ci-cf-smoke-and-destroy-daily-build-gce
    - include: jenkins_job.yml
      vars:
        job_name: trial-terraform-deploy-aws
        job_template: terraform-deploy
        target_environment_name: trial
        platform: aws
        upstream_jobs:
        - "ci-smoke-test-aws"
    - include: jenkins_job.yml
      vars:
        job_name: trial-ansible-deploy-aws
        job_template: ansible-deploy-aws
        target_environment_name: trial
    - include: jenkins_job.yml
      vars:
        job_name: trial-smoke-test-aws
        job_template: smoke-test
        platform: "aws"
        target_environment_name: trial
        build_interval: "H/2 * * * *"
    - include: jenkins_job.yml
      vars:
        job_name: ci-terraform-deploy-aws
        job_template: terraform-deploy
        target_environment_name: ci
        poll_scm: "H/5 * * * *"
        platform: aws
    - include: jenkins_job.yml
      vars:
        job_name: ci-terraform-deploy-gce
        job_template: terraform-deploy
        target_environment_name: ci
        poll_scm: "H/5 * * * *"
        platform: gce
    - include: jenkins_job.yml
      vars:
        job_name: demo-terraform-deploy-aws
        job_template: terraform-deploy
        target_environment_name: demo
        platform: aws
    - include: jenkins_job.yml
      vars:
        job_name: demo-terraform-deploy-gce
        job_template: terraform-deploy
        target_environment_name: demo
        platform: gce
    - include: jenkins_job.yml
      vars:
        job_name: ci-ansible-deploy-aws
        job_template: ansible-deploy-aws
        target_environment_name: ci
        poll_scm: "H/5 * * * *"
    - include: jenkins_job.yml
      vars:
        job_name: ci-ansible-deploy-gce
        job_template: ansible-deploy-gce
        target_environment_name: ci
        poll_scm: "H/5 * * * *"
    - include: jenkins_job.yml
      vars:
        job_name: demo-ansible-deploy-aws
        job_template: ansible-deploy-aws
        target_environment_name: demo
    - include: jenkins_job.yml
      vars:
        job_name: demo-ansible-deploy-gce
        job_template: ansible-deploy-gce
        target_environment_name: demo
    - include: jenkins_job.yml
      vars:
        job_name: ci-smoke-test-aws
        job_template: smoke-test
        platform: "aws"
        target_environment_name: ci
        upstream_jobs:
        - "ci-ansible-deploy-aws"
    - include: jenkins_job.yml
      vars:
        job_name: ci-smoke-test-gce
        job_template: smoke-test
        platform: "gce"
        target_environment_name: ci
        upstream_jobs:
        - "ci-ansible-deploy-gce"
    - include: jenkins_job.yml
      vars:
        job_name: demo-smoke-test-aws
        job_template: smoke-test
        platform: "aws"
        target_environment_name: demo
        build_interval: "H/2 * * * *"
        email_notification_address: "multi-cloud-paas-demo@digital.cabinet-office.gov.uk"
    - include: jenkins_job.yml
      vars:
        job_name: demo-smoke-test-gce
        job_template: smoke-test
        platform: "gce"
        target_environment_name: demo
        build_interval: "H/2 * * * *"
        email_notification_address: "multi-cloud-paas-demo@digital.cabinet-office.gov.uk"
    - include: jenkins_job.yml
      vars:
        job_name: suspend-aws-environments
        job_template: suspend-environments
        platform: "aws"
        exclude_env: "demo ci trial"
        cron_suspend_time: "0 19 * * *"
    - include: jenkins_job.yml
      vars:
        job_name: suspend-gce-environments
        job_template: suspend-environments
        platform: "gce"
        exclude_env: "demo ci trial"
        cron_suspend_time: "0 19 * * *"
    - include: jenkins_job.yml
      vars:
        job_name: stage-trial-cf-deploy-aws
        job_template: cf-deploy
        target_environment_name: stage-trial
        platform: aws
        poll_scm: "H/5 * * * *"
        downstream_parameterized_trigger_job: stage-trial-cf-smoke-test-aws
    - include: jenkins_job.yml
      vars:
        job_name: stage-trial-cf-smoke-test-aws
        job_template: smoke-test-cf
        target_environment_name: stage-trial
        platform: aws
    - include: jenkins_job.yml
      vars:
        job_name: trial-cf-deploy-aws
        job_template: cf-deploy
        target_environment_name: trial
        platform: aws
        upstream_jobs:
        - "stage-trial-cf-smoke-test-aws"
        downstream_parameterized_trigger_job: trial-cf-smoke-test-aws
        deploy_trial_ssl_certificates: true
    - include: jenkins_job.yml
      vars:
        job_name: trial-cf-smoke-test-aws
        job_template: smoke-test-cf
        target_environment_name: trial
        platform: aws
        build_interval: "H/2 * * * *"
    - include: jenkins_view.yml
      vars:
        view_name: build-monitor
    - include: jenkins_view.yml
      vars:
        environment_regex: '^ci-.*'
        view_name: ci
        view_template: environment-view
    - include: jenkins_view.yml
      vars:
        environment_regex: '^demo-.*'
        view_name: demo
        view_template: environment-view
    - include: jenkins_view.yml
      vars:
        environment_regex: '^trial-.*'
        view_name: trial
        view_template: environment-view
    - include: jenkins_view.yml
      vars:
        environment_regex: '^stage-.*'
        view_name: stage
        view_template: environment-view

    - name: execute dsl seed job for vagrant
      shell: "sleep 20 && curl -X POST 'http://127.0.0.1:8080/job/default-dsl-job/build'"
      when: vagrant is defined
    - name: create jenkins .ssh directory
      file: path=/var/lib/jenkins/.ssh state=directory mode=0775 owner="jenkins"
    - name: deploy deployer keys
      copy:
        content: "{{ deployer_key['key'] }}"
        dest: /var/lib/jenkins/.ssh/{{ deployer_key['name'] }}
        mode: 0600
        owner: "jenkins"
      when: deployer_key is defined
      notify:
        - generate pub key
    - name: deploy gce credentials
      template: src=templates/gce_account.json.j2 dest=/var/lib/jenkins/.account.json
      when: gce_account is defined
    - name: deploy aws credentials
      copy: content="{{ aws_credentials }}" dest=/var/lib/jenkins/.aws_credentials
      when: aws_credentials is defined
    - name: deploy tsuru credentials
      copy: content="{{ tsuru_credentials }}" dest=/var/lib/jenkins/.tsuru_credentials
      when: tsuru_credentials is defined
    - name: disable global ssh strict hostname checking
      lineinfile: dest=/etc/ssh/ssh_config state=present regexp='^StrictHostKeyChecking' line='StrictHostKeyChecking no'
    - name: create secrets.py file
      copy:
        content: "{{ secrets_py  }}"
        dest: /var/lib/jenkins/.secrets.py
        owner: jenkins
        group: jenkins
        mode: 0600
      when: secrets_py is defined
    - name: create gce account certificate file
      copy:
        content: "{{ gce_account_certificate_pem  }}"
        dest: /var/lib/jenkins/.gce_account.pem
        owner: jenkins
        group: jenkins
        mode: 0600
      when: gce_account_certificate_pem is defined
    - name: copy bash_gpg
      copy: src=files/.bash_gpg dest=/var/lib/jenkins/.bash_gpg
    - name: create jenkins gnupg hidden directory
      file: path=/var/lib/jenkins/.gnupg state=directory owner=jenkins group=jenkins mode=0700
    - name: copy gpg_agent.conf
      copy: src=files/gpg-agent.conf dest=/var/lib/jenkins/.gnupg/gpg-agent.conf
    - name: copy the .bashrc
      copy: src=files/.bashrc dest=/var/lib/jenkins/.bashrc
    - name: check gpg keys are present
      shell: "gpg --list-public-keys"
      sudo_user: jenkins
      register: publickeys
    - name: trigger gpg handlers
      shell: "echo Importing GPG keys"
      when: "not '{{ gpg_public_key_id }}' in publickeys.stdout"
      notify:
        - deploy gpg key file
        - import gpg private key
        - remove gpg key file
        - import gpg public key
  handlers:
    - name: unzip terraform to /usr/local/bin
      unarchive: src="/tmp/terraform_{{ terraform_version }}_linux_amd64.zip" dest=/usr/local/bin copy=no
    - name: import certificate into java keystore
      shell: "keytool -import -alias {{ github_hostname }} -keystore {{ java_home }}/lib/security/cacerts -file ~/{{ github_hostname }}.crt -storepass {{ keystore_password }} -noprompt"
      when: vagrant is not defined
    - name: setup jenkins authentication
      shell: "curl 'http://127.0.0.1:8080/scriptText' -d \"script=$(cat ~/setup_authentication.groovy)\" -k $(cat ~/jenkins_auth)"
      when: vagrant is not defined
    - name: configure admin email and smtp server
      shell: "curl 'http://127.0.0.1:8080/scriptText' -d \"script=$(cat ~/setup_mail.groovy)\" -k $(cat ~/jenkins_auth)"
      when: vagrant is not defined
    - name: generate pub key
      shell: "ssh-keygen -y -f /var/lib/jenkins/.ssh/{{ deployer_key['name'] }} \
> /var/lib/jenkins/.ssh/{{ deployer_key['name'] }}.pub \
&& chown jenkins:jenkins /var/lib/jenkins/.ssh/{{ deployer_key['name'] }}.pub"
    - name: deploy gpg key file
      copy: content="{{ jenkins_gpg_secure_key }}" dest=/var/lib/jenkins/.gnupg/multicloud-deploy.key
    - name: import gpg private key
      shell: "gpg --batch --yes --allow-secret-key-import --import /var/lib/jenkins/.gnupg/multicloud-deploy.key"
      sudo_user: jenkins
    - name: remove gpg key file
      file: path=/var/lib/jenkins/.gnupg/multicloud-deploy.key state=absent
    - name: import gpg public key
      shell: gpg --batch --yes --keyserver hkp://keyserver.ubuntu.com  --recv-keys {{ gpg_public_key_id }}
      sudo_user: jenkins
    - name: process DSL
      shell: "curl -X POST 'http://127.0.0.1:8080/job/default-dsl-job/build' -k $([ ! -e ~/jenkins_auth ] || cat ~/jenkins_auth)"
